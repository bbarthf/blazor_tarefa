@*injetar servicos nos componentes*@
@inject IJSRuntime js 
<h1>Titulo</h1>

    <table class="table">
        <thead>
            <tr>
                <th>Acao</th>
                <th>Data</th>
                <th>Descriçao</th>
                <th>Concluida</th>
            </tr>
        </thead>
        <tbody>
          <ListaGenerica Listaitem="tarefas">
              <Lista Context="tarefa">
                  <tr>
                      <TarefaIndividual item="tarefa" RemoverTarefa="RemoveTarefa" />
                  </tr>
              </Lista>
          </ListaGenerica>
        </tbody>
    </table>



<Confirma @ref="confirmacao" onCancela="CancelaConfirmacao" onConfirma="RemoverTarefaConfirmacao">
   <div>Deseja Excluir esta tarefa</div>
</Confirma>


@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="Text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}

@code {

    [Parameter] public List<Tarefa> tarefas { get; set; }
    [Parameter] public string Titulo { get; set; }

    private string novaTarefa = "";
    static int TotalTarefas = 0;
    Confirma confirmacao;

    Tarefa tarefaRemover;

    async void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            });
            novaTarefa = "";
            TotalTarefas = tarefas.Count();
            //await js.InvokeVoidAsync("getTotalTarefas");
            await js.InvokeAsync<int>("getTotalTarefasInstancia", DotNetObjectReference.Create(this));
        }

    }

    [JSInvokable]
    public static Task<int> ObterTotalTarefa()
    {
        return Task.FromResult(TotalTarefas);
    }

    // Nao e estatico mais 
    [JSInvokable]
    public Task<int> ObterTarefasInstancia()
    {
        return Task.FromResult(TotalTarefas);
    }

    //private async Task RemoveTarefa(Tarefa tarefa)
    private void RemoveTarefa(Tarefa tarefa)
    {
        confirmacao.Exibir();
        tarefaRemover = tarefa;
        //var resultado = await js.InvokeAsync<bool>("confirm", "Excluir Tarefa?");

        //if (resultado)
        //{
        //tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));
        //await js.InvokeVoidAsync("alert", "Tarefa excluida com sucesso");
        //  await js.InvokeAsync<object>("MostraAlerta", "Ok, Tarefa Excluida");
        //}
    }

    void CancelaConfirmacao()
    {
        confirmacao.Ocultar();
        tarefaRemover = null;
    }

    void RemoverTarefaConfirmacao()
    {
        tarefas.Remove(tarefaRemover);
        tarefaRemover = null;
        confirmacao.Ocultar();
    }

}