@*injetar servicos nos componentes*@
@inject IJSRuntime js 
<h1>Titulo</h1>

    <table class="table">
        <thead>
            <tr>
                <th>Acao</th>
                <th>Data</th>
                <th>Descriçao</th>
                <th>Concluida</th>
            </tr>
        </thead>
        <tbody>
          <ListaGenerica Listaitem="tarefas">
              <Lista Context="tarefa">
                  <tr>
                      <TarefaIndividual item="tarefa" RemoverTarefa="RemoveTarefa" />
                  </tr>
              </Lista>
          </ListaGenerica>
        </tbody>
    </table>

@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="Text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}

@code {

    [Parameter] public List<Tarefa> tarefas { get; set; }
    [Parameter] public string Titulo { get; set; }

    private string novaTarefa = "";
    static int TotalTarefas = 0;

    async void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            });
            novaTarefa = "";
            TotalTarefas = tarefas.Count();
            await js.InvokeVoidAsync("getTotalTarefas");
        }

    }

    [JSInvokable]
    public static Task<int> ObterTotalTarefa()
    {
        return Task.FromResult(TotalTarefas);
    }

    private async Task RemoveTarefa(Tarefa tarefa)
    {
        var resultado = await js.InvokeAsync<bool>("confirm", "Excluir Tarefa?");

        if (resultado)
        {
            tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));
            //await js.InvokeVoidAsync("alert", "Tarefa excluida com sucesso");
            await js.InvokeAsync<object>("MostraAlerta", "Ok, Tarefa Excluida");
        }
    }

}